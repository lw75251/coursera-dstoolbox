# Sets the matrix itself but not the inverse
set <- function(y) {
x <<- y
inv <<- NULL
}
# get function
# Gets the matrix itself but not the inverse
get <- function() x
# Manually set the inverse
setinverse <- function(inverse) inv <<- inverse
# Get the inverse
getinverse <- function() inv
# Encapsulate into a list
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Checks to see if inverse was already calculated
m <- x$getinverse()
if ( !is.null(inv) ){
message("getting cached data")
return(inv)
}
## Otherwise calculates mean and sets value of inverse
data <- x$get()
m <- solve(data, ...)
x$setinverse(inv)
## Return a matrix that is the inverse of 'x'
return(inv)
}
x <- matrix(1:4, nrow=2, ncol=2)
m <- makeCacheMatrix(x)
s <- cacheSolve(m)
## Put comments here that give an overall description of what your
## functions do
## Function: makeCacheMatrix
## Description: Creates a special vector that contains a list of functions to
## set the value of vector, get the value of vector, set the value of inverse,
## and get the value of inverse
makeCacheMatrix <- function(x = matrix()) {
# Initially set to NULL
# Changes when the user sets the value
inv <- NULL
# set function
# Sets the matrix itself but not the inverse
set <- function(y) {
x <<- y
inv <<- NULL
}
# get function
# Gets the matrix itself but not the inverse
get <- function() x
# Manually set the inverse
setinverse <- function(inverse) inv <<- inverse
# Get the inverse
getinverse <- function() inv
# Encapsulate into a list
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# Following the same format as the assignment example
# Get the current state of the inverse and see if it
# has been computed yet
inv <- x$getinverse()
# If it has...
if(!is.null(inv)) {
# Simply return the computed inverse
message("Getting cached matrix")
return(inv)
}
# If it hasn't...
# Get the matrix itself
data <- x$get()
# Find the inverse
inv <- solve(data, ...)
# Cache this result in the object
x$setinverse(inv)
# Return this new result
inv
}
x <- matrix(1:4, nrow=2, ncol=2)
m <- makeCacheMatrix(x)
s <- cacheSolve(m)
print(s)
## Put comments here that give an overall description of what your
## functions do
## These functions written for cousera data science: R programming
## Week 3 assignment; September 23, 2018; Github User- Sahil KGS
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## This function creates a special "matrix" object that can cache it's inverse
makeCacheMatrix <- function(x = matrix())	{ ##	define the argument with default mode of "matrix"
inv	 <- NULL				  ##	initialize inv as NULL; will hold value of matrix inverse
set	 <- function (y)	{	          ##	define the set function to assign new
x<<-y				          ##	value of matrix in parent environment
inv<<-NULL				  ##	if there is a new matrix, reset inv to NULL
}
get <-function ()	x			  ##	define the get function - returns value of the matrix argument
setinverse<- function(inverse) inv <<- inverse ## assigns value of inv in parent environment
getinverse <- function() inv							## gets the value of inv where called
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)	## you need this to refer
## to the function with the $ operator
}
## Write a short comment describing this function
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then cacheSolve will retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse ()
if(!is.null(inv))	{
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data,...)
x$setinverse(inv)
inv
}
x <- matrix(1:4, nrow=2, ncol=2)
m <- makeCacheMatrix(x)
s <- cacheSolve(m)
print(s)
s
clear
)
## Put comments here that give an overall description of what your
## functions do
## These functions written for cousera data science: R programming
## Week 3 assignment; September 23, 2018; Github User- Sahil KGS
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## This function creates a special "matrix" object that can cache it's inverse
makeCacheMatrix <- function(x = matrix())	{ ##	define the argument with default mode of "matrix"
inv	 <- NULL				  ##	initialize inv as NULL; will hold value of matrix inverse
set	 <- function (y)	{	          ##	define the set function to assign new
x<<-y				          ##	value of matrix in parent environment
inv<<-NULL				  ##	if there is a new matrix, reset inv to NULL
}
get <-function ()	x			  ##	define the get function - returns value of the matrix argument
setinverse<- function(inverse) inv <<- inverse ## assigns value of inv in parent environment
getinverse <- function() inv							## gets the value of inv where called
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)	## you need this to refer
## to the function with the $ operator
}
## Write a short comment describing this function
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then cacheSolve will retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse ()
if(!is.null(inv))	{
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data,...)
x$setinverse(inv)
inv
}
## Put comments here that give an overall description of what your
## functions do
## These functions written for cousera data science: R programming
## Week 3 assignment; September 23, 2018; Github User- Sahil KGS
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
## This function creates a special "matrix" object that can cache it's inverse
makeCacheMatrix <- function(x = matrix())	{ ##	define the argument with default mode of "matrix"
inv	 <- NULL				  ##	initialize inv as NULL; will hold value of matrix inverse
set	 <- function (y)	{	          ##	define the set function to assign new
x<<-y				          ##	value of matrix in parent environment
inv<<-NULL				  ##	if there is a new matrix, reset inv to NULL
}
get <-function ()	x			  ##	define the get function - returns value of the matrix argument
setinverse<- function(inverse) inv <<- inverse ## assigns value of inv in parent environment
getinverse <- function() inv							## gets the value of inv where called
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)	## you need this to refer
## to the function with the $ operator
}
## Write a short comment describing this function
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then cacheSolve will retrieve the inverse from the cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse ()
if(!is.null(inv))	{
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data,...)
x$setinverse(inv)
inv
}
## Make the "matrix" object, capable of cache-ing the inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
matrix <- list(get = get,
setinv = setinv,
getinv = getinv)
}
## Check if the matrix has its inverse in the cache, if not then calculate the inverse and store it in the cache
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached inverse... ...")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached inverse... ...")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
ls
)
## Make the "matrix" object, capable of cache-ing the inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
matrix <- list(get = get,
setinv = setinv,
getinv = getinv)
}
## Check if the matrix has its inverse in the cache, if not then calculate the inverse and store it in the cache
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached inverse... ...")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x <- matrix(1:4, nrow=2, ncol=2)
m <- makeCacheMatrix(x)
s <- cacheSolve(m)
print(s)
set.seed(1)
rpois(5, 2)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants,10)
tail()
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:6,4)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),prob = c(0.3,0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- sapply(my_pois,mean)
cm
cm <- colMeans(my_pois)
cm
hist(cm)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(dist~speed,cars)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab = "Stopping Distance")
plot(cars,main = "My Plot")
?plo
?plot
plot(cars,main = "My Plot Subtitle")
plot(cars,sub = "My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
library(mtcars)
load(mtcars)
load("mtcars")
help
data(mtcars)
?boxplot
boxplot(formula = mpg~cyl, data = mtcars)
hist(mtcars$mpg)
setwd(dir = "C:/Users/Leon Wu/Desktop/Online Courses/coursera-dstoolbox/R_Programming/Quiz_4/")
df <- read.csv(file = "hospital-data.csv")
df
best("SC","heart atack")
?best
# Plots 30-day mortality rates for heart attacks
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
# Plots 30-day mortality rates for heart attacks
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
# Makes a simple histogram
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
str(outcome)
outcome$State
unique(outcome$State)
# Plots 30-day mortality rates for heart attacks
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
# Makes a simple histogram
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
### Function: Best
# Params: state   - 2-character abbreviation of US States
#         outcome - "heart attack", "heart faliure", or "pneumonia"
# Description: Returns character vector with name of hospital that has the lowest
# 30-day mortality for the specified outcome in that state. Function will validate
# input and throw an error if either state or outcome is invalid.
best <- function(state, outcome) {
# Prepares data to be manipulated
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11] <- as.numeric(data[,11]) # heart attack
data[,17] <- as.numeric(data[,17]) # heart failure
data[,23] <- as.numeric(data[,23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
valid_states <- unique(outcome$State)
# Input Validation
if ( !(state %in% valid_states) ) {
stop("invalid state")
}
else if ( !(outcome %in% valid_outcomes) ) {
stop("invalid outcomes")
}
else {
# Gets correct column number depending on outcome
col_num <- 0
if ( outcome == "heart attack" ) {
col_num = 11
}
else if ( outcome == "heart failure") {
col_num = 17
}
else {
col_num = 21
}
# Subsets original data to find correct state and outcome values
# and calculates min
statesub <- data[data[,7]==state,]
outcomesub <- statesub[,col_num]
min <- min(outcomesub, na.rm = TRUE)
min_index <- which(outcomesub == min )
name <- statesub[min_index,2]
return(name)
}
}
best("TX", "heart attack")
# Plots 30-day mortality rates for heart attacks
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
# Makes a simple histogram
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
### Function: Best
# Params: state   - 2-character abbreviation of US States
#         outcome - "heart attack", "heart faliure", or "pneumonia"
# Description: Returns character vector with name of hospital that has the lowest
# 30-day mortality for the specified outcome in that state. Function will validate
# input and throw an error if either state or outcome is invalid.
best <- function(state, outcome) {
# Prepares data to be manipulated
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11] <- as.numeric(data[,11]) # heart attack
data[,17] <- as.numeric(data[,17]) # heart failure
data[,23] <- as.numeric(data[,23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
# Input Validation
if ( !(state %in% data$State) ) {
stop("invalid state")
}
else if ( !(outcome %in% valid_outcomes) ) {
stop("invalid outcomes")
}
else {
# Gets correct column number depending on outcome
col_num <- 0
if ( outcome == "heart attack" ) {
col_num = 11
}
else if ( outcome == "heart failure") {
col_num = 17
}
else {
col_num = 21
}
# Subsets original data to find correct state and outcome values
# and calculates min
statesub <- data[data[,7]==state,]
outcomesub <- statesub[,col_num]
min <- min(outcomesub, na.rm = TRUE)
min_index <- which(outcomesub == min )
name <- statesub[min_index,2]
return(name)
}
}
best("TX", "heart attack")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
# Plots 30-day mortality rates for heart attacks
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
# Makes a simple histogram
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
### Function: Best
# Params: state   - 2-character abbreviation of US States
#         outcome - "heart attack", "heart faliure", or "pneumonia"
# Description: Returns character vector with name of hospital that has the lowest
# 30-day mortality for the specified outcome in that state. Function will validate
# input and throw an error if either state or outcome is invalid.
best <- function(state, outcome) {
# Prepares data to be manipulated
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11] <- as.numeric(data[,11]) # heart attack
data[,17] <- as.numeric(data[,17]) # heart failure
data[,23] <- as.numeric(data[,23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
# Input Validation
if ( !(state %in% data$State) ) {
stop("invalid state")
}
else if ( !(outcome %in% valid_outcomes) ) {
stop("invalid outcomes")
}
else {
# Gets correct column number depending on outcome
col_num <- 0
if ( outcome == "heart attack" ) {
col_num = 11
}
else if ( outcome == "heart failure") {
col_num = 17
}
else {
col_num = 23
}
# Subsets original data to find correct state and outcome values
# and calculates min
statesub <- data[data[,7]==state,]
outcomesub <- statesub[,col_num]
min <- min(outcomesub, na.rm = TRUE)
min_index <- which(outcomesub == min )
name <- statesub[min_index,2]
return(name)
}
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
